// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  seller
  customer
  admin
}

model User {
  id           Int            @id @default(autoincrement())
  email        String?        @unique
  createdAt    DateTime       @default(now())
  roles        UserRole[]     @default([customer])
  BasketItem   BasketItem[]
  FavoriteItem FavoriteItem[]
  Recipient    Recipient?
}

model EmailCode {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      Int
  createdAt DateTime @default(now())
}

model GoodCategory {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  image       String?
  icon        String?
  parentId    Int?
  parent      GoodCategory?  @relation("GoodCategory", fields: [parentId], references: [id])
  children    GoodCategory[] @relation("GoodCategory")
  Good        Good[]
  createdAt   DateTime       @default(now())
}

model Brand {
  id          String   @id @default(cuid())
  name        String
  description String?
  image       String?
  goods       Good[]
  createdAt   DateTime @default(now())
}

enum GoodStatus {
  draft
  published
}

model Good {
  id            String         @id @default(cuid())
  articleNumber String?
  modifiedName  String?
  title         String
  description   String
  status        GoodStatus     @default(draft)
  price         Float          @default(0)
  priceWithDisc Float?
  count         Int            @default(0)
  delivering    Int            @default(0)
  bought        Int            @default(0)
  views         Int            @default(0)
  images        String[]
  categoryId    Int?
  category      GoodCategory?  @relation(fields: [categoryId], references: [id])
  brandId       String?
  brand         Brand?         @relation(fields: [brandId], references: [id])
  BasketItem    BasketItem[]
  FavoriteItem  FavoriteItem[]
  createdAt     DateTime       @default(now())
}

model BasketItem {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goodId    String
  good      Good     @relation(fields: [goodId], references: [id], onDelete: Cascade)
  count     Int
  createdAt DateTime @default(now())

  @@unique([userId, goodId])
}

model FavoriteItem {
  id        String   @id @default(cuid())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goodId    String
  good      Good     @relation(fields: [goodId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, goodId])
}

model DeliveryMethod {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String?
  createdAt   DateTime @default(now())
}

model PaymentMethod {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String?
  createdAt   DateTime @default(now())
}

enum OrderStatus {
  created
  payed
  delivery
  delivered
  success
  canceled
}

model Checkout {
  id     String @id @default(cuid())
  userId Int

  paymentMethodId   String?
  paymentMethodName String?

  deliveryMethodId   String
  deliveryMethodName String

  recipientName    String
  recipientAddress String
  recipientPhone   String

  goodsIdList String[]
  goodsPrice  Float[]
  goodsCount  Int[]
  goodsName   String[]

  status OrderStatus @default(created)

  updatedAt   DateTime      @updatedAt
  createdAt   DateTime      @default(now())
  Transaction Transaction[]
}

model Recipient {
  userId    Int      @unique
  name      String
  address   String
  phone     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum TransactionStatus {
  pending
  success
  error
}

model Transaction {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  status       TransactionStatus @default(pending)
  price        Float             @default(0)
  checkoutId   String
  checkout     Checkout          @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  providerData String
}

enum NewsStatus {
  draft
  published
}

model News {
  id               String     @id @default(cuid())
  title            String
  htmlDocumentName String
  images           String[]
  status           NewsStatus @default(draft)
  isPrimary        Boolean    @default(false)
  publishedAt      DateTime?
  updatedAt        DateTime   @updatedAt
  createdAt        DateTime   @default(now())
}

model Settings {
  id    Int    @id @unique @default(1)
  title String
  logo  String
}
